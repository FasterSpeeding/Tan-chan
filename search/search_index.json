{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tan-chan # A utility library which extends Tanjun. Installation # You can install Tan-chan from PyPI using the following command in any Python 3.9 or above environment. python -m pip install -U tanchan Quick Usage # For usage see the documentation . Support # Hikari's support guild provides for support for Tan-chan. Contributing # Before contributing you should read through the contributing guidelines and the code of conduct .","title":"Home"},{"location":"#tan-chan","text":"A utility library which extends Tanjun.","title":"Tan-chan"},{"location":"#installation","text":"You can install Tan-chan from PyPI using the following command in any Python 3.9 or above environment. python -m pip install -U tanchan","title":"Installation"},{"location":"#quick-usage","text":"For usage see the documentation .","title":"Quick Usage"},{"location":"#support","text":"Hikari's support guild provides for support for Tan-chan.","title":"Support"},{"location":"#contributing","text":"Before contributing you should read through the contributing guidelines and the code of conduct .","title":"Contributing"},{"location":"changelog/","text":"Changelog # All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased #","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"usage/","text":"Usage # Coming soon.","title":"Usage"},{"location":"usage/#usage","text":"Coming soon.","title":"Usage"},{"location":"reference/doc_parse/","text":"tanchan.doc_parse # tanjun.annotations extention which uses docstring parsing. as_slash_command # as_slash_command ( * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. This will use the function's name as the command's name and parse the description from the callback's docstring (Unlike tanjun.as_slash_command ). Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name is over 32 characters long. If the command name has uppercase characters. If the description is over 100 characters long. with_annotated_args # with_annotated_args ( command = None , / , * , doc_style = None , follow_wrapped = False ) Docstring parsing implementation of tanjun.annotations.with_annotated_args . This will parse slash command option descriptions from the command's docstring. PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: tanjun . SlashCommand | tanjun . MessageCommand DEFAULT: None doc_style The docstyle to parse slash command descriptions from. This may be either \"google\" or \"numpy\" . If left as None then this will try to auto-detect the style. TYPE: typing . Optional [ _DocStyleUnion ] DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . SlashCommand | tanjun . MessageCommand The command object to enable using this as a decorator. RAISES DESCRIPTION RuntimeError If doc_style is None and this failed to detect the docstring style.","title":"tanchan.doc_parse"},{"location":"reference/doc_parse/#tanchandoc_parse","text":"tanjun.annotations extention which uses docstring parsing.","title":"tanchan.doc_parse"},{"location":"reference/doc_parse/#tanchan.doc_parse.as_slash_command","text":"as_slash_command ( * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. This will use the function's name as the command's name and parse the description from the callback's docstring (Unlike tanjun.as_slash_command ). Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name is over 32 characters long. If the command name has uppercase characters. If the description is over 100 characters long.","title":"as_slash_command()"},{"location":"reference/doc_parse/#tanchan.doc_parse.with_annotated_args","text":"with_annotated_args ( command = None , / , * , doc_style = None , follow_wrapped = False ) Docstring parsing implementation of tanjun.annotations.with_annotated_args . This will parse slash command option descriptions from the command's docstring. PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: tanjun . SlashCommand | tanjun . MessageCommand DEFAULT: None doc_style The docstyle to parse slash command descriptions from. This may be either \"google\" or \"numpy\" . If left as None then this will try to auto-detect the style. TYPE: typing . Optional [ _DocStyleUnion ] DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . SlashCommand | tanjun . MessageCommand The command object to enable using this as a decorator. RAISES DESCRIPTION RuntimeError If doc_style is None and this failed to detect the docstring style.","title":"with_annotated_args()"}]}